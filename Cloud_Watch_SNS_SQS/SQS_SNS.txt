MIDDLEWARE: IN BETWEEN ANY TWO

OS - APP --> WAS / JBOSS / WEBLOGIC
APP - APP --> WMQ / MSMQ /ACTIVE MQ / RABBIT / SNAKE


SQS: ONE TO ONE COOMUNICATION
SNS: ONE TO MANY COMMUNICATION

COMM - TYPES:
1. SYNC COMM - BOTH SENDER - RECEIVER - SHOULD BE AVAILABLE.
2. ASYNC COMM - SENDER SHOULD BE AVAILABLE - NOT WORRIED ABT RECEIVER.

SENDER - PRODUCER
RECEIVER - CONSUMER


MQ: MESSAGE QUEUE.
APPLICTION TO APP COMMUNICATION.

MESSAGE: IS A MEANINGFUL DATA [LANGUAGE / FORMAT].
1. REQUEST
2. RESPONSE
3. ORDER
4. ANNOUNCEMENT

MESSAGE PARTS:
1. HEADER - SENDER/RECEIVER/EXPIRY DATE/PRIORITY/ MSG_ID
2. APP DATA - CONTENT FOR THE APPLICATION

MESSAGE FORMAT:
1. XML
2. HTML
3. HL7

HL7:
PAT|SUKUMAR|SRINIVASAN|45|M|
MED|HAEDACHE|SARIDON|1|3|


APP1 ----- QUEUE  ------ APP2

QUEUE: TEMPORARY LOCATION FOR THE MESSAGES, TILL THE CONSUMER CONSUMES IT.

QUEUE METHOD:
1. FIFO - FIRST IN. FIRST OUT
2. RANDOM - PICKING THE MESSAGE AS PER THE USER.

QUEUE TYPES:
1. LOCAL Q
2. REMOTE Q
3. DEAD LETTER Q
3. ALIAS Q

QUEUE.SUKUMAR.ICICI
QUEUE.SUKU.ICICI


TOPICS: SUBJECT
PUBISHER: SENDER - FIRE & FORGET
SUBSCRIBER: RECEIVER

PUB/SUB
ONE - MANY
PUB ----> TOPIC -----> SUB1 / SUB2 / SUB3

SCENARIO:1 
QUEUE CREATION
PUTTING TEST MESSAGING


SCENARIO:2
CREATE TOPIC
ARN OF THE TOPIC:arn:aws:sns:ap-south-1:301463220628:my_topic
register the email address of the user and confirm the subcription
REGISTER UNDER QUEUE TO THE TOPIC.

NOW TEST THE TOPIC.

APP1 --- QUEUE ---- SQS ---- MOBILE APP ---- DB [NUMBER] ----- END USER


SCENARIO: 3

EC2 CPU UTILIZATION CHECKING USING CLOUD WATCH TOOL.
create EC2 - install application on it.
then open CLoud watch
copy the instance id from the EC2
creating the metric - > CPU Utilization.
Set alarm -> do the setting, name it, adjust duration to 1min, select the topic.

output - Alarm raises for this ec2 utilization and notification sent to EMAIL & SQS.




